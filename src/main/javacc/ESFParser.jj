options {
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
  STATIC=false;
}

PARSER_BEGIN(ESFParser)

package org.lwes.db;

import org.lwes.util.Log;

public class ESFParser
{
  private String currentEvent;
  private EventTemplateDB eventTemplateDB;

  public void setEventTemplateDB(EventTemplateDB DB)
    { eventTemplateDB = DB; }

  public EventTemplateDB getEventTemplateDB()
    { return eventTemplateDB; }

  public void setCurrentEvent(String evt)
    { currentEvent = evt; }

  public String getCurrentEvent()
    { return currentEvent; }
}

PARSER_END(ESFParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
|  "\r" : DEFAULT
|  "\r\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}


TOKEN :
{
    < REQ: "required" >
  | < OPT: "optional" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < ID: ["a"-"z","A"-"Z","_",":","0"-"9","."] (["a"-"z","A"-"Z","_",":","0"-"9","."])* >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
  | < STRING_LITERAL: "\""(<ID>)"\"" >

}

/**
 * A list of events
 */
void eventlist() :
{
}
{
  event() ( event() )* <EOF>
}

/**
 * a single event
 */
void event() :
{
}
{
  eventName() "{" [ attributeList() ] "}"
}

/**
 * The name of an event, should be max 256 chars ([a-zA-Z0-9_]*)
 */
void eventName() :
{
  Token t;
}
{
  t=<ID>
  {
    if ( getEventTemplateDB().addEvent(t.image))
    {
      setCurrentEvent(t.image);
    }
    else
    {
      throw new ParseException("Problem adding event "+t.image);
    }
  }
}

void attributeList() :
{}
{
  attribute() ( attribute() )*
}

int arraySize() :
{
  Token t;
}
{
    t = <ID>
    {
    return Integer.parseInt(t.image);
    }
}

String StringLiteral() :
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {
       return t.image;
    }
}

boolean BooleanLiteral() :
{}
{
  <TRUE>
  {
    return true;
  }
  |
  <FALSE>
  {
    return false;
  }
}

int IntegerLiteral() :
{
    Token t;
}
{
  t = <ID>
  {
  Log.debug("INTEGER LITERAL");
    try {
      return Integer.parseInt(t.image);
    } catch (NumberFormatException e) {
      throw new Error();
    }
  }
}

Object defaultValue() :
{
    Object obj;
}
{
    obj = IntegerLiteral()
    {
      return obj;
    }
    | obj = BooleanLiteral()
    {
      return obj;
    }
    | obj = StringLiteral()
    {
      return obj;
    }
}

void attribute() :
{
  String aType;
  String anAttribute;
  int anArraySize = 0;
  boolean required = false;
  Object aDefaultValue = null;
}
{
  ((("required" {required = true;} | "optional") (aType=type() anAttribute=attributeName() [ "[" anArraySize = arraySize() "]" ] [ "=" aDefaultValue = defaultValue() ] ";"))
|
  (aType=type() anAttribute=attributeName() [ "[" anArraySize = arraySize() "]" ] [ "=" aDefaultValue = defaultValue() ] ";")  ) {
      if ( !( aType.equals("uint16")  ||
              aType.equals("int16")   ||
              aType.equals("uint32")  ||
              aType.equals("int32")   ||
              aType.equals("string")  ||
              aType.equals("ip_addr") ||
              aType.equals("int64")   ||
              aType.equals("uint64")  ||
              aType.equals("byte")    ||
              aType.equals("boolean")
            )
         )
       {
         throw new ParseException("No such type '"+aType+"'");
       }

      String evt = getCurrentEvent();
      if ( evt == null ) throw new ParseException("Bad Event");

      if (Log.isLogTrace()) {
        Log.trace("Type: "+aType+" attr: "+anAttribute+" size: "+anArraySize);
        Log.trace("Required: "+required);
        Log.trace("default value: "+aDefaultValue);
      }

      if (anArraySize > 0) {
        aType = "[L"+aType;
      }

      if ( !getEventTemplateDB().addEventAttribute(evt,
                                                   anAttribute,
                                                   aType,
                                                   anArraySize,
                                                   required,
                                                   aDefaultValue))
      {
        throw new ParseException("Problem adding attribute "+evt+"("
                                 +aType+","+anAttribute+")");
      }
   }
}

String type() :
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}

String attributeName() :
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}
