options {
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
  STATIC=false;
}

PARSER_BEGIN(ESFParser)

package org.lwes.db;

public class ESFParser
{
  private String currentEvent;
  private EventTemplateDB eventTemplateDB;

  public void setEventTemplateDB(EventTemplateDB DB)
    { eventTemplateDB = DB; }

  public EventTemplateDB getEventTemplateDB()
    { return eventTemplateDB; }

  public void setCurrentEvent(String evt)
    { currentEvent = evt; }

  public String getCurrentEvent()
    { return currentEvent; }
}

PARSER_END(ESFParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
|  "\r" : DEFAULT
|  "\r\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}


TOKEN :
{
  < ID: ["a"-"z","A"-"Z","_",":","0"-"9"] (["a"-"z","A"-"Z","_",":","0"-"9"])* >
}

/**
 * A list of events
 */
void eventlist() :
{
}
{
  event() ( event() )* <EOF>
}

/**
 * a single event
 */
void event() :
{
}
{
  eventName() "{" [ attributeList() ] "}"
}

/**
 * The name of an event, should be max 256 chars ([a-zA-Z0-9_]*)
 */
void eventName() :
{
  Token t;
}
{
  t=<ID>
  {
    if ( getEventTemplateDB().addEvent(t.image))
    {
      setCurrentEvent(t.image);
    }
    else
    {
      throw new ParseException("Problem adding event "+t.image);
    }
  }
}

void attributeList() :
{}
{
  attribute() ( attribute() )*
}

void attribute() :
{
  String aType;
  String anAttribute;
}
{
  aType=type() anAttribute=attributeName() ";" { 
      if ( !( aType.equals("uint16") 
            | aType.equals("int16")
            | aType.equals("uint32")
            | aType.equals("int32")
            | aType.equals("string")
            | aType.equals("ip_addr")
            | aType.equals("int64")
            | aType.equals("uint64")
            | aType.equals("boolean")
            )
         ) 
       {
         throw new ParseException("No such type '"+aType+"'");
       }
      String evt = getCurrentEvent();
      if ( evt == null ) throw new ParseException("Bad Event");
      if ( !getEventTemplateDB().addEventAttribute(evt,anAttribute,aType))
      {
        throw new ParseException("Problem adding attribute "+evt+"("
                                 +aType+","+anAttribute+")"); 
      }
   }
}

String type() :
{ 
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}

String attributeName() :
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}
